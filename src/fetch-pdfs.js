"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chromium = require("chrome-aws-lambda");
const AWS = require("aws-sdk");
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || "";
const PRIMARY_KEY = process.env.PRIMARY_KEY || "";
// // // //
const fetchUrl = "http://ogccweblink.state.co.us/Results.aspx?DocName=WELL%20ABANDONMENT%20REPORT%20(INTENT)&DocDate=02/03/2020";
// export const handler = async (): Promise<any> => {
exports.handler = async (event = {}, context = {}) => {
    // Log statement to ensure it's loading
    console.log("RUN LAMBDA!");
    console.log(TABLE_NAME);
    console.log(PRIMARY_KEY);
    // // // //
    // // // //
    let result = null;
    let browser = null;
    try {
        // Defines browser
        browser = await chromium.puppeteer.launch({
            args: chromium.args,
            defaultViewport: chromium.defaultViewport,
            executablePath: await chromium.executablePath,
            headless: chromium.headless
        });
        // Defines page
        let page = await browser.newPage();
        // Set downloads directory
        // await page._client.send("Page.setDownloadBehavior", {
        //   behavior: "allow",
        //   downloadPath: "./"
        // });
        // Navigate to page, wait until dom content is loaded
        await page.goto(event.url || fetchUrl, {
            waitUntil: "domcontentloaded"
        });
        // Gets ALL urls
        // @ts-ignore
        let allHrefs = await page.$$eval("a", as => as.map(a => a.href));
        // Gets Download URLS
        let downloadHrefs = allHrefs.filter(a => a.includes("DownloadDocumentPDF"));
        // // Logs downloadHrefs
        console.log("downloadHrefs");
        console.log(downloadHrefs);
        // // // //
        // DYNAMO DB CODE
        await Promise.all(downloadHrefs.map((downloadUrl) => {
            // Pulls documentId from downloadUrl
            const documentId = String(downloadUrl.split("DocumentId=").pop());
            // Defines the item we're inserting into the database
            const item = {
                [PRIMARY_KEY]: documentId,
                documentType: "WELL ABANDONMENT REPORT (INTENT)",
                date: "02/03/2020",
                downloadUrl: downloadUrl
            };
            // Defines the params for db.put
            const params = {
                TableName: TABLE_NAME,
                Item: item
            };
            // Inserts the record into the DynamoDB table
            return db.put(params).promise();
        }));
        // Logs "DONE" statement
        console.log("DONE");
    }
    catch (error) {
        return context.fail(error);
    }
    finally {
        if (browser !== null) {
            await browser.close();
        }
    }
    return context.succeed(result);
};
// // // //
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2gtcGRmcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZldGNoLXBkZnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBOEM7QUFDOUMsK0JBQStCO0FBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFDaEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBRWxELFdBQVc7QUFFWCxNQUFNLFFBQVEsR0FDWiwrR0FBK0csQ0FBQztBQUVsSCxxREFBcUQ7QUFDeEMsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUMxQixRQUFhLEVBQUUsRUFDZixVQUFlLEVBQUUsRUFDSCxFQUFFO0lBQ2hCLHVDQUF1QztJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUV6QixXQUFXO0lBQ1gsV0FBVztJQUVYLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztJQUNsQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFFbkIsSUFBSTtRQUNGLGtCQUFrQjtRQUNsQixPQUFPLEdBQUcsTUFBTSxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUN4QyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7WUFDbkIsZUFBZSxFQUFFLFFBQVEsQ0FBQyxlQUFlO1lBQ3pDLGNBQWMsRUFBRSxNQUFNLFFBQVEsQ0FBQyxjQUFjO1lBQzdDLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtTQUM1QixDQUFDLENBQUM7UUFFSCxlQUFlO1FBQ2YsSUFBSSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkMsMEJBQTBCO1FBQzFCLHdEQUF3RDtRQUN4RCx1QkFBdUI7UUFDdkIsdUJBQXVCO1FBQ3ZCLE1BQU07UUFFTixxREFBcUQ7UUFDckQsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksUUFBUSxFQUFFO1lBQ3JDLFNBQVMsRUFBRSxrQkFBa0I7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsZ0JBQWdCO1FBQ2hCLGFBQWE7UUFDYixJQUFJLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRWpFLHFCQUFxQjtRQUNyQixJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7UUFFNUUsd0JBQXdCO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzQixXQUFXO1FBQ1gsaUJBQWlCO1FBQ2pCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDZixhQUFhLENBQUMsR0FBRyxDQUNmLENBQUMsV0FBbUIsRUFBZ0IsRUFBRTtZQUNwQyxvQ0FBb0M7WUFDcEMsTUFBTSxVQUFVLEdBQVcsTUFBTSxDQUMvQixXQUFXLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUN2QyxDQUFDO1lBRUYscURBQXFEO1lBQ3JELE1BQU0sSUFBSSxHQUFRO2dCQUNoQixDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVU7Z0JBQ3pCLFlBQVksRUFBRSxrQ0FBa0M7Z0JBQ2hELElBQUksRUFBRSxZQUFZO2dCQUNsQixXQUFXLEVBQUUsV0FBVzthQUN6QixDQUFDO1lBRUYsZ0NBQWdDO1lBQ2hDLE1BQU0sTUFBTSxHQUFHO2dCQUNiLFNBQVMsRUFBRSxVQUFVO2dCQUNyQixJQUFJLEVBQUUsSUFBSTthQUNYLENBQUM7WUFFRiw2Q0FBNkM7WUFDN0MsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xDLENBQUMsQ0FDRixDQUNGLENBQUM7UUFFRix3QkFBd0I7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVCO1lBQVM7UUFDUixJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDcEIsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdkI7S0FDRjtJQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hyb21pdW0gZnJvbSBcImNocm9tZS1hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIjtcbmNvbnN0IGRiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuY29uc3QgVEFCTEVfTkFNRSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgXCJcIjtcbmNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVkgfHwgXCJcIjtcblxuLy8gLy8gLy8gLy9cblxuY29uc3QgZmV0Y2hVcmwgPVxuICBcImh0dHA6Ly9vZ2Njd2VibGluay5zdGF0ZS5jby51cy9SZXN1bHRzLmFzcHg/RG9jTmFtZT1XRUxMJTIwQUJBTkRPTk1FTlQlMjBSRVBPUlQlMjAoSU5URU5UKSZEb2NEYXRlPTAyLzAzLzIwMjBcIjtcblxuLy8gZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoKTogUHJvbWlzZTxhbnk+ID0+IHtcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKFxuICBldmVudDogYW55ID0ge30sXG4gIGNvbnRleHQ6IGFueSA9IHt9XG4pOiBQcm9taXNlPGFueT4gPT4ge1xuICAvLyBMb2cgc3RhdGVtZW50IHRvIGVuc3VyZSBpdCdzIGxvYWRpbmdcbiAgY29uc29sZS5sb2coXCJSVU4gTEFNQkRBIVwiKTtcbiAgY29uc29sZS5sb2coVEFCTEVfTkFNRSk7XG4gIGNvbnNvbGUubG9nKFBSSU1BUllfS0VZKTtcblxuICAvLyAvLyAvLyAvL1xuICAvLyAvLyAvLyAvL1xuXG4gIGxldCByZXN1bHQgPSBudWxsO1xuICBsZXQgYnJvd3NlciA9IG51bGw7XG5cbiAgdHJ5IHtcbiAgICAvLyBEZWZpbmVzIGJyb3dzZXJcbiAgICBicm93c2VyID0gYXdhaXQgY2hyb21pdW0ucHVwcGV0ZWVyLmxhdW5jaCh7XG4gICAgICBhcmdzOiBjaHJvbWl1bS5hcmdzLFxuICAgICAgZGVmYXVsdFZpZXdwb3J0OiBjaHJvbWl1bS5kZWZhdWx0Vmlld3BvcnQsXG4gICAgICBleGVjdXRhYmxlUGF0aDogYXdhaXQgY2hyb21pdW0uZXhlY3V0YWJsZVBhdGgsXG4gICAgICBoZWFkbGVzczogY2hyb21pdW0uaGVhZGxlc3NcbiAgICB9KTtcblxuICAgIC8vIERlZmluZXMgcGFnZVxuICAgIGxldCBwYWdlID0gYXdhaXQgYnJvd3Nlci5uZXdQYWdlKCk7XG5cbiAgICAvLyBTZXQgZG93bmxvYWRzIGRpcmVjdG9yeVxuICAgIC8vIGF3YWl0IHBhZ2UuX2NsaWVudC5zZW5kKFwiUGFnZS5zZXREb3dubG9hZEJlaGF2aW9yXCIsIHtcbiAgICAvLyAgIGJlaGF2aW9yOiBcImFsbG93XCIsXG4gICAgLy8gICBkb3dubG9hZFBhdGg6IFwiLi9cIlxuICAgIC8vIH0pO1xuXG4gICAgLy8gTmF2aWdhdGUgdG8gcGFnZSwgd2FpdCB1bnRpbCBkb20gY29udGVudCBpcyBsb2FkZWRcbiAgICBhd2FpdCBwYWdlLmdvdG8oZXZlbnQudXJsIHx8IGZldGNoVXJsLCB7XG4gICAgICB3YWl0VW50aWw6IFwiZG9tY29udGVudGxvYWRlZFwiXG4gICAgfSk7XG5cbiAgICAvLyBHZXRzIEFMTCB1cmxzXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGxldCBhbGxIcmVmcyA9IGF3YWl0IHBhZ2UuJCRldmFsKFwiYVwiLCBhcyA9PiBhcy5tYXAoYSA9PiBhLmhyZWYpKTtcblxuICAgIC8vIEdldHMgRG93bmxvYWQgVVJMU1xuICAgIGxldCBkb3dubG9hZEhyZWZzID0gYWxsSHJlZnMuZmlsdGVyKGEgPT4gYS5pbmNsdWRlcyhcIkRvd25sb2FkRG9jdW1lbnRQREZcIikpO1xuXG4gICAgLy8gLy8gTG9ncyBkb3dubG9hZEhyZWZzXG4gICAgY29uc29sZS5sb2coXCJkb3dubG9hZEhyZWZzXCIpO1xuICAgIGNvbnNvbGUubG9nKGRvd25sb2FkSHJlZnMpO1xuXG4gICAgLy8gLy8gLy8gLy9cbiAgICAvLyBEWU5BTU8gREIgQ09ERVxuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgZG93bmxvYWRIcmVmcy5tYXAoXG4gICAgICAgIChkb3dubG9hZFVybDogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgICAgICAvLyBQdWxscyBkb2N1bWVudElkIGZyb20gZG93bmxvYWRVcmxcbiAgICAgICAgICBjb25zdCBkb2N1bWVudElkOiBzdHJpbmcgPSBTdHJpbmcoXG4gICAgICAgICAgICBkb3dubG9hZFVybC5zcGxpdChcIkRvY3VtZW50SWQ9XCIpLnBvcCgpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIERlZmluZXMgdGhlIGl0ZW0gd2UncmUgaW5zZXJ0aW5nIGludG8gdGhlIGRhdGFiYXNlXG4gICAgICAgICAgY29uc3QgaXRlbTogYW55ID0ge1xuICAgICAgICAgICAgW1BSSU1BUllfS0VZXTogZG9jdW1lbnRJZCxcbiAgICAgICAgICAgIGRvY3VtZW50VHlwZTogXCJXRUxMIEFCQU5ET05NRU5UIFJFUE9SVCAoSU5URU5UKVwiLFxuICAgICAgICAgICAgZGF0ZTogXCIwMi8wMy8yMDIwXCIsXG4gICAgICAgICAgICBkb3dubG9hZFVybDogZG93bmxvYWRVcmxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gRGVmaW5lcyB0aGUgcGFyYW1zIGZvciBkYi5wdXRcbiAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgICAgICAgICBJdGVtOiBpdGVtXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIEluc2VydHMgdGhlIHJlY29yZCBpbnRvIHRoZSBEeW5hbW9EQiB0YWJsZVxuICAgICAgICAgIHJldHVybiBkYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuXG4gICAgLy8gTG9ncyBcIkRPTkVcIiBzdGF0ZW1lbnRcbiAgICBjb25zb2xlLmxvZyhcIkRPTkVcIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZmFpbChlcnJvcik7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKGJyb3dzZXIgIT09IG51bGwpIHtcbiAgICAgIGF3YWl0IGJyb3dzZXIuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29udGV4dC5zdWNjZWVkKHJlc3VsdCk7XG59O1xuXG4vLyAvLyAvLyAvL1xuIl19